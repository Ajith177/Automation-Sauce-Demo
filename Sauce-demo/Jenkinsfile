pipeline {
    agent any

    tools {
        // This name must match Jenkins ‚Üí Global Tool Configuration
        sonarQubeScanner 'SonarQubeScanner'
    }

    environment {
        // Name defined in Jenkins > Configure System > SonarQube
        SONARQUBE_SERVER = 'Mysonarqube'
        SONAR_HOST_URL = 'http://192.168.1.4:9000'
    }

    stages {
        stage('Clone') {
            steps {
                echo 'üì• Cloning the repository...'
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo '‚öôÔ∏è Installing dependencies...'
                sh 'pip install -r requirements.txt'
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ Running unit tests...'
                sh 'pytest tests/ --maxfail=5 --disable-warnings --tb=short'
            }
        }

        stage('SonarQube Scan') {
            steps {
                echo 'üîç Running SonarQube analysis...'
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    sh """
                        sonar-scanner \
                        -Dsonar.projectKey=my_python_automation \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=$SONAR_HOST_URL
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'üöÄ Deploying application (placeholder)...'
                // Example: sh 'scp -r . user@server:/app'
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully.'
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs for details.'
        }
    }
}
